import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.set.Set;

/**
 * JUnit test fixture for {@code Set<String>}'s constructor and kernel methods.
 *
 * @author Put your name here
 *
 */
public abstract class SetTest {

    /**
     * Invokes the appropriate {@code Set} constructor for the implementation
     * under test and returns the result.
     *
     * @return the new set
     * @ensures constructorTest = {}
     */
    protected abstract Set<String> constructorTest();

    /**
     * Invokes the appropriate {@code Set} constructor for the reference
     * implementation and returns the result.
     *
     * @return the new set
     * @ensures constructorRef = {}
     */
    protected abstract Set<String> constructorRef();

    /**
     * Creates and returns a {@code Set<String>} of the implementation under
     * test type with the given entries.
     *
     * @param args
     *            the entries for the set
     * @return the constructed set
     * @requires [every entry in args is unique]
     * @ensures createFromArgsTest = [entries in args]
     */
    private Set<String> createFromArgsTest(String... args) {
        Set<String> set = this.constructorTest();
        for (String s : args) {
            assert !set.contains(
                    s) : "Violation of: every entry in args is unique";
            set.add(s);
        }
        return set;
    }

    /**
     * Creates and returns a {@code Set<String>} of the reference implementation
     * type with the given entries.
     *
     * @param args
     *            the entries for the set
     * @return the constructed set
     * @requires [every entry in args is unique]
     * @ensures createFromArgsRef = [entries in args]
     */
    private Set<String> createFromArgsRef(String... args) {
        Set<String> set = this.constructorRef();
        for (String s : args) {
            assert !set.contains(
                    s) : "Violation of: every entry in args is unique";
            set.add(s);
        }
        return set;
    }

    // TODO - add test cases for constructor, add, remove, removeAny, contains, and size

    /**
     * Test for constructor empty.
     */
    @Test
    public final void testConstructorEmpty() {
        Set<String> s = this.constructorTest();
        Set<String> sExpected = this.constructorRef();

        assertEquals(sExpected, s);
    }

    /**
     * Test Add to Empty
     */

    @Test
    public final void testAddEmpty() {

        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef("Elephants");

        s.add("Elephants");

        assertEquals(sExpected, s);
    }

    /**
     * Test Add to Non-Empty
     */

    @Test
    public final void testAddNonEmpty() {

        Set<String> s = this.createFromArgsTest("Elephants");
        Set<String> sExpected = this.createFromArgsRef("Elephants", "Peacocks");

        s.add("Peacocks");

        assertEquals(sExpected, s);
    }

    /**
     * Test Remove to Empty
     */

    @Test
    public final void testRemoveEmpty() {

        Set<String> s = this.createFromArgsTest("Dogs");
        Set<String> sExpected = this.createFromArgsRef();

        String r = s.remove("Dogs");
        String rExpected = "Dogs";

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Remove to Non-Empty
     */

    @Test
    public final void testRemoveNonEmpty() {

        Set<String> s = this.createFromArgsTest("Dogs", "Hippos");
        Set<String> sExpected = this.createFromArgsRef("Hippos");

        String r = s.remove("Dogs");
        String rExpected = "Dogs";

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test removeAny to Empty
     */

    @Test
    public final void testRemoveAnyEmpty() {

        Set<String> s = this.createFromArgsTest("Hippos");
        Set<String> sExpected = this.createFromArgsRef();

        String r = s.removeAny();
        String rExpected = "Hippos";

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test removeAny to Non-Empty Not In Order
     */

    @Test
    public final void testRemoveAnyNonEmptyNotInOrder() {

        Set<String> s = this.createFromArgsTest("Hippos", "Dogs", "Alligators");
        Set<String> sExpected = this.createFromArgsRef("Hippos", "Dogs");

        String r = s.removeAny();
        String rExpected = "Alligators";

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test removeAny to Non-Empty In Order
     */

    @Test
    public final void testRemoveAnyNonEmptyInOrder() {

        Set<String> s = this.createFromArgsTest("Alligators", "Bats", "Cats");
        Set<String> sExpected = this.createFromArgsRef("Bats", "Cats");

        String r = s.removeAny();
        String rExpected = "Alligators";

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Contains True
     */

    @Test
    public final void testContainsTrue() {

        Set<String> s = this.createFromArgsTest("Hippos", "Dogs", "Alligators");
        Set<String> sExpected = this.createFromArgsRef("Hippos", "Dogs",
                "Alligators");

        Boolean r = s.contains("Dogs");
        Boolean rExpected = true;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Contains False
     */

    @Test
    public final void testContainsFalse() {

        Set<String> s = this.createFromArgsTest("Hippos", "Dogs", "Alligators");
        Set<String> sExpected = this.createFromArgsRef("Hippos", "Dogs",
                "Alligators");

        Boolean r = s.contains("Candy");
        Boolean rExpected = false;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Contains Empty
     */

    @Test
    public final void testContainsEmpty() {

        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef();

        Boolean r = s.contains("Candy");
        Boolean rExpected = false;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Size Empty
     */

    @Test
    public final void testSizeEmpty() {

        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef();

        int r = s.size();
        int rExpected = 0;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Size Non Empty
     */

    @Test
    public final void testSizeNonEmpty() {

        Set<String> s = this.createFromArgsTest("Birds");
        Set<String> sExpected = this.createFromArgsRef("Birds");

        int r = s.size();
        int rExpected = 1;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }

    /**
     * Test Size Non Empty
     */

    @Test
    public final void testSizeNonEmpty1() {

        Set<String> s = this.createFromArgsTest("Birds", "Dogs", "Hippos",
                "Snakes", "Elephants");
        Set<String> sExpected = this.createFromArgsRef("Birds", "Dogs",
                "Hippos", "Snakes", "Elephants");

        int r = s.size();
        int rExpected = 5;

        assertEquals(sExpected, s);
        assertEquals(rExpected, r);
    }
}
