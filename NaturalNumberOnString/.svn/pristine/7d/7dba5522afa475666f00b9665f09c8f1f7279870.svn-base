import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.naturalnumber.NaturalNumber;

/**
 * JUnit test fixture for {@code NaturalNumber}'s constructors and kernel
 * methods.
 *
 * @author Keshab Gautam, Tej Patel
 *
 */
public abstract class NaturalNumberTest {

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @return the new number
     * @ensures constructorTest = 0
     */
    protected abstract NaturalNumber constructorTest();

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param i
     *            {@code int} to initialize from
     * @return the new number
     * @requires i >= 0
     * @ensures constructorTest = i
     */
    protected abstract NaturalNumber constructorTest(int i);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param s
     *            {@code String} to initialize from
     * @return the new number
     * @requires there exists n: NATURAL (s = TO_STRING(n))
     * @ensures s = TO_STRING(constructorTest)
     */
    protected abstract NaturalNumber constructorTest(String s);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param n
     *            {@code NaturalNumber} to initialize from
     * @return the new number
     * @ensures constructorTest = n
     */
    protected abstract NaturalNumber constructorTest(NaturalNumber n);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @return the new number
     * @ensures constructorRef = 0
     */
    protected abstract NaturalNumber constructorRef();

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param i
     *            {@code int} to initialize from
     * @return the new number
     * @requires i >= 0
     * @ensures constructorRef = i
     */
    protected abstract NaturalNumber constructorRef(int i);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param s
     *            {@code String} to initialize from
     * @return the new number
     * @requires there exists n: NATURAL (s = TO_STRING(n))
     * @ensures s = TO_STRING(constructorRef)
     */
    protected abstract NaturalNumber constructorRef(String s);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param n
     *            {@code NaturalNumber} to initialize from
     * @return the new number
     * @ensures constructorRef = n
     */
    protected abstract NaturalNumber constructorRef(NaturalNumber n);

    // TODO - add test cases for four constructors, multiplyBy10, divideBy10, isZero

    /**
     * Test constructor
     */
    @Test
    public final void testConstructor() {

        NaturalNumber n = this.constructorTest();
        NaturalNumber nExpected = this.constructorRef();

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with ints
     */
    @Test
    public final void testConstructorInt0() {

        NaturalNumber n = this.constructorTest(0);
        NaturalNumber nExpected = this.constructorRef(0);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with ints
     */
    @Test
    public final void testConstructorInt() {

        NaturalNumber n = this.constructorTest(5678);
        NaturalNumber nExpected = this.constructorRef(5678);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with ints
     */
    @Test
    public final void testConstructorIntMax() {

        NaturalNumber n = this.constructorTest(Integer.MAX_VALUE);
        NaturalNumber nExpected = this.constructorRef(Integer.MAX_VALUE);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with strings
     */
    @Test
    public final void testConstructorStr0() {

        NaturalNumber n = this.constructorTest("0");
        NaturalNumber nExpected = this.constructorRef("0");

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with strings
     */
    @Test
    public final void testConstructorStr1() {

        NaturalNumber n = this.constructorTest("578");
        NaturalNumber nExpected = this.constructorRef("578");

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with strings
     */
    @Test
    public final void testConstructorStr2() {
        NaturalNumber n = this.constructorTest("12345678910111213");
        NaturalNumber nExpected = this.constructorRef("12345678910111213");

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with NN
     */
    @Test
    public final void testConstructorNN() {
        NaturalNumber nnTest = this.constructorRef();

        NaturalNumber n = this.constructorTest(nnTest);
        NaturalNumber nExpected = this.constructorRef(nnTest);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with NN
     */
    @Test
    public final void testConstructorNN1() {
        NaturalNumber nnTest = this.constructorRef(0);

        NaturalNumber n = this.constructorTest(nnTest);
        NaturalNumber nExpected = this.constructorRef(0);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with NN
     */
    @Test
    public final void testConstructorNN2() {
        NaturalNumber nnTest = this.constructorRef(123456);

        NaturalNumber n = this.constructorTest(nnTest);
        NaturalNumber nExpected = this.constructorRef(123456);

        assertEquals(n, nExpected);
    }

    /**
     * Test constructor with NN
     */
    @Test
    public final void testConstructorNN4() {
        NaturalNumber nnTest = this.constructorRef("12345678910111213");

        NaturalNumber n = this.constructorTest(nnTest);
        NaturalNumber nExpected = this.constructorRef("12345678910111213");

        assertEquals(n, nExpected);
    }

    /**
     * Test multiplyBy10
     */
    @Test
    public final void testmultiplyBy10() {
        NaturalNumber n = this.constructorTest();
        NaturalNumber nExpected = this.constructorRef();

        n.multiplyBy10(0);
        assertEquals(n, nExpected);
    }
}
